{"version":3,"sources":["components/Header/Header.js","components/Grid/Grid.js","Calendar.js","serviceWorker.js","index.js"],"names":["Header","props","date","month","year","setDate","className","onClick","bind","this","Grid","getDaysOfWeek","days","arr","i","length","obj","string","number","state","daysOfWeek","map","cell","key","row","indexOf","id","React","Component","Calendar","getMonth","getMonthLength","Date","getDate","getDays","day","today","Array","keys","count","filter","item","empty","fill","j","undefined","getDay","action","monthNumber","monthLength","setState","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yUAmBeA,MAhBf,SAAgBC,GAAQ,IAAD,EACCA,EAAMC,KAAtBC,EADe,EACfA,MAAOC,EADQ,EACRA,KACTC,EAAUJ,EAAMI,QACpB,OACE,4BAAQC,UAAU,UAChB,4BAAQA,UAAU,kBAAkBC,QAASF,EAAQG,KAAKC,KAAM,aAAhE,UAGA,yBAAKH,UAAU,iBAAf,UAAmCH,EAAnC,YAA4CC,IAC5C,4BAAQE,UAAU,kBAAkBC,QAASF,EAAQG,KAAKC,KAAM,aAAhE,YCTeC,G,kBACnB,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KAORU,cAAgB,WAGd,IAFA,IAAIC,EAAO,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,gBAC5CC,EAAM,GACDC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CACpC,IAAIE,EAAM,CACRC,OAAQL,EAAKE,GACbI,OAAQJ,EAAI,EACZR,UAAW,8BAGTQ,IAAMF,EAAKG,OAAS,IAAGC,EAAIE,OAAS,GACxCL,EAAIC,GAAKE,EAEX,OAAOH,GAlBP,EAAKM,MAAQ,CACXC,WAAY,EAAKT,iBAJF,E,sEAyBjB,IAAIC,EAAOH,KAAKR,MAAMC,KAAKU,KAC3B,OACE,2BAAON,UAAU,QACf,2BAAOA,UAAU,cACf,wBAAIA,UAAU,4BACXG,KAAKU,MAAMC,WAAWC,KAAI,SAACC,GAAD,OACzB,wBAAIhB,UAAWgB,EAAKhB,UAAWiB,IAAKD,EAAKJ,QACtCI,EAAKL,aAKd,2BAAOX,UAAU,cACdM,EAAKS,KAAI,SAACG,GAAD,OACR,wBAAIlB,UAAU,YAAYiB,IAAKX,EAAKa,QAAQD,IACzCA,EAAIH,KAAI,SAACC,GAAD,OACP,wBAAIhB,UAAWgB,EAAKhB,UAAWiB,IAAKD,EAAKI,IACtCJ,EAAKJ,qB,GA3CUS,IAAMC,Y,kOCEnBC,E,YACnB,WAAY5B,GAAQ,IAAD,uBACjB,4CAAMA,KAmBR6B,SAAW,SAAC3B,GAgBV,O,yVADO,IAdM,CACX,uCACA,6CACA,2BACA,uCACA,qBACA,2BACA,2BACA,uCACA,mDACA,6CACA,uCACA,+CAGSA,IApCM,EAuCnB4B,eAAiB,SAAC3B,EAAMD,GACtB,OAAO,IAAI6B,KAAK5B,EAAMD,EAAQ,EAAG,GAAG8B,WAxCnB,EA2CnBC,QAAU,SAACC,EAAKpB,EAAQqB,GACtB,IAAIxB,EAAI,YAAOyB,MAAMtB,EAAS,GAAGuB,QAC7BzB,EAAM,GACN0B,EAAQ,EAEA,IAARJ,EACFvB,EAAOA,EAAK4B,QAAO,SAACC,GAAD,OAAmB,IAATA,MAEjB,IAARN,IAAWA,EAAM,GAErBvB,EAAOA,EAAK4B,QAAO,SAACC,GAAD,OAAmB,IAATA,MAG/B,IAAIC,EAAQ,IAAIL,MAAMF,GAAKQ,KAAK,IAChC/B,EAAI,sBAAO8B,GAAP,YAAiB9B,IAErB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1BD,EAAIC,GAAK,GACT,IAAK,IAAI8B,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAI5B,EAAM,CACRV,UAAW,aACXY,OAAQN,EAAK2B,KACbb,GAAIkB,QAGaC,IAAf7B,EAAIE,SACNF,EAAIE,OAAS,IAGXF,EAAIE,SAAWkB,IACjBpB,EAAIV,WAAa,uBAGnBO,EAAIC,GAAG8B,GAAK5B,GAGhB,OAAOH,GA/EU,EAkFnBiC,OAAS,SAAC1C,EAAMD,GACd,OAAO,IAAI6B,KAAK5B,EAAMD,EAAO,GAAG2C,UAnFf,EAsFnBzC,QAAU,SAAC0C,GACT,IAAM7C,EAAO,IAAI8B,KADG,EAEuC,EAAKb,MAA1Df,EAFc,EAEdA,KAAM4C,EAFQ,EAERA,YAAaC,EAFL,EAEKA,YAAarC,EAFlB,EAEkBA,KAAMuB,EAFxB,EAEwBA,IAAKC,EAF7B,EAE6BA,MAElC,aAAXW,IACkB,KAAhBC,GACFA,EAAc,EACd5C,KAEA4C,KAIW,aAAXD,IACkB,IAAhBC,GACFA,EAAc,GACd5C,KAEA4C,KAIJb,EAAM,EAAKW,OAAO1C,EAAM4C,GACxBC,EAAc,EAAKlB,eAAe3B,EAAM4C,GACxCpC,EAAO,EAAKsB,QAAQC,EAAKc,GAEzB,EAAKC,SAAS,CACZ9C,KAAMA,EACND,MAAO,EAAK2B,SAASkB,GACrBA,YAAaA,EACbC,YAAaA,EACbrC,KAAMA,EACNuB,IAAKA,IAGHa,IAAgB9C,EAAK4B,YAAc1B,IAASF,EAAKiD,eACnD,EAAKD,SAAS,CACZtC,KAAM,EAAKsB,QAAQC,EAAKc,EAAab,MAzHzC,IAAMlC,EAAO,IAAI8B,KACX5B,EAAOF,EAAKiD,cACZhD,EAAQD,EAAK4B,WACbmB,EAAc,EAAKlB,eAAe3B,EAAMD,GACxCgC,EAAM,EAAKW,OAAO1C,EAAMD,GACxBiC,EAAQlC,EAAK+B,UAPF,OASjB,EAAKd,MAAQ,CACXf,KAAMA,EACND,MAAO,EAAK2B,SAAS3B,GACrB6C,YAAa7C,EACb8C,YAAaA,EACbrC,KAAM,EAAKsB,QAAQC,EAAKc,EAAab,GACrCD,IAAKA,EACLC,MAAOA,GAhBQ,E,sEAiIjB,OACE,yBAAK9B,UAAU,YACb,kBAAC,EAAD,CAAQJ,KAAMO,KAAKU,MAAOd,QAASI,KAAKJ,UACxC,kBAAC,EAAD,CAAMH,KAAMO,KAAKU,a,GArIaQ,IAAMC,WCOxBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SD2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e8cd91ea.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.scss';\n\nfunction Header(props) {\n  let { month, year } = props.date;\n  let setDate = props.setDate;\n  return (\n    <header className=\"header\">\n      <button className=\"header__control\" onClick={setDate.bind(this, 'decrease')}>\n        &#9668;\n      </button>\n      <div className=\"header__title\">{`${month} ${year}`}</div>\n      <button className=\"header__control\" onClick={setDate.bind(this, 'increase')}>\n        &#9658;\n      </button>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport './Grid.scss';\n\nexport default class Grid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      daysOfWeek: this.getDaysOfWeek(),\n    };\n  }\n\n  getDaysOfWeek = () => {\n    let days = ['ПН', 'ВТ', 'СР', 'ЧТ', 'ПТ', 'СБ', 'ВС'];\n    let arr = [];\n    for (let i = 0; i < days.length; i++) {\n      let obj = {\n        string: days[i],\n        number: i + 1,\n        className: 'grid__cell grid__cell_head',\n      };\n\n      if (i === days.length - 1) obj.number = 0;\n      arr[i] = obj;\n    }\n    return arr;\n  };\n\n  render() {\n    let days = this.props.date.days;\n    return (\n      <table className=\"grid\">\n        <thead className=\"grid__head\">\n          <tr className=\"grid__row grid__row_head\">\n            {this.state.daysOfWeek.map((cell) => (\n              <td className={cell.className} key={cell.number}>\n                {cell.string}\n              </td>\n            ))}\n          </tr>\n        </thead>\n        <tbody className=\"grid__body\">\n          {days.map((row) => (\n            <tr className=\"grid__row\" key={days.indexOf(row)}>\n              {row.map((cell) => (\n                <td className={cell.className} key={cell.id}>\n                  {cell.number}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import React from 'react';\nimport './Calendar.scss';\nimport Header from './components/Header/Header';\nimport Grid from './components/Grid/Grid';\n\nexport default class Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n    const date = new Date();\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const monthLength = this.getMonthLength(year, month);\n    const day = this.getDay(year, month);\n    const today = date.getDate();\n\n    this.state = {\n      year: year,\n      month: this.getMonth(month),\n      monthNumber: month,\n      monthLength: monthLength,\n      days: this.getDays(day, monthLength, today),\n      day: day,\n      today: today,\n    };\n  }\n\n  getMonth = (month) => {\n    let months = [\n      'Январь',\n      'Февраль',\n      'Март',\n      'Апрель',\n      'Май',\n      'Июнь',\n      'Июль',\n      'Август',\n      'Сентябрь',\n      'Октябрь',\n      'Ноябрь',\n      'Декабрь',\n    ];\n    let obj = { ...months };\n    return obj[month];\n  };\n\n  getMonthLength = (year, month) => {\n    return new Date(year, month + 1, 0).getDate();\n  };\n\n  getDays = (day, length, today) => {\n    let days = [...Array(length + 1).keys()];\n    let arr = [];\n    let count = 1;\n\n    if (day === 1) {\n      days = days.filter((item) => item !== 0);\n    } else {\n      if (day === 0) day = 7;\n\n      days = days.filter((item) => item !== 0);\n    }\n\n    let empty = new Array(day).fill('');\n    days = [...empty, ...days];\n\n    for (let i = 0; i < 6; i++) {\n      arr[i] = [];\n      for (let j = 0; j < 7; j++) {\n        let obj = {\n          className: 'grid__cell',\n          number: days[count++],\n          id: j,\n        };\n\n        if (obj.number === undefined) {\n          obj.number = '';\n        }\n\n        if (obj.number === today) {\n          obj.className += ' grid__cell_current';\n        }\n\n        arr[i][j] = obj;\n      }\n    }\n    return arr;\n  };\n\n  getDay = (year, month) => {\n    return new Date(year, month, 1).getDay();\n  };\n\n  setDate = (action) => {\n    const date = new Date();\n    let { year, monthNumber, monthLength, days, day, today } = this.state;\n\n    if (action === 'increase') {\n      if (monthNumber === 11) {\n        monthNumber = 0;\n        year++;\n      } else {\n        monthNumber++;\n      }\n    }\n\n    if (action === 'decrease') {\n      if (monthNumber === 0) {\n        monthNumber = 11;\n        year--;\n      } else {\n        monthNumber--;\n      }\n    }\n\n    day = this.getDay(year, monthNumber);\n    monthLength = this.getMonthLength(year, monthNumber);\n    days = this.getDays(day, monthLength);\n\n    this.setState({\n      year: year,\n      month: this.getMonth(monthNumber),\n      monthNumber: monthNumber,\n      monthLength: monthLength,\n      days: days,\n      day: day,\n    });\n\n    if (monthNumber === date.getMonth() && year === date.getFullYear()) {\n      this.setState({\n        days: this.getDays(day, monthLength, today),\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"calendar\">\n        <Header date={this.state} setDate={this.setDate} />\n        <Grid date={this.state} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Calendar from './Calendar';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Calendar />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}